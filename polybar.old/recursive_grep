#!/bin/bash

# Default values
search_pattern="battery"
case_sensitive=false

# Function to display usage information
display_help() {
    echo "Usage: $0 [--help] [--case_sensitive] <directory_path> [pattern]"
    echo "Options:"
    echo "  --help             Display this help message"
    echo "  --case_sensitive   Perform case-sensitive search (default is case-insensitive)"
    echo "Arguments:"
    echo "  directory_path     Path to the directory to search recursively"
    echo "  pattern            Pattern to search for (default is \"battery\")"
}

# Parse command-line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help)
            display_help
            exit 0
            ;;
        --case_sensitive)
            case_sensitive=true
            shift
            ;;
        *)
            if [[ -z "$search_dir" ]]; then
                search_dir="$1"
            elif [[ -z "$search_pattern" ]]; then
                search_pattern="$1"
            fi
            shift
            ;;
    esac
done

if [ -z "$search_dir" ]; then
    echo "Error: Missing directory_path argument."
    display_help
    exit 1
fi

# Function to process files recursively
search_files() {
    local file
    local relative_path
    relative_path=$(realpath --relative-to="$search_dir" "$1")

    while IFS= read -r line; do
        if $case_sensitive; then
            match=$(grep -E -n --color=never "$search_pattern" <<< "$line")
        else
            match=$(grep -E -ni --color=never "$search_pattern" <<< "$line")
        fi

        if [ ! -z "$match" ]; then
            line_number=$(echo "$match" | cut -d':' -f1)
            context_lines=$(sed -n "$((line_number-1)),$((line_number+1))p" "$1")
            echo "$relative_path:"
            echo "${context_lines//$'\n'/$'\n '}"
            echo "------------"
        fi
    done < "$1"
}

# Main execution starts here
find "$search_dir" -type f -print0 | while IFS= read -r -d '' file; do
    search_files "$file"
done
